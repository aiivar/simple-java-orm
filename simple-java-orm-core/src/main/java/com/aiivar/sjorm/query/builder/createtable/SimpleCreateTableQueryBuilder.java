package com.aiivar.sjorm.query.builder.createtable;

import com.aiivar.sjorm.annotations.Column;
import com.aiivar.sjorm.annotations.Entity;
import com.aiivar.sjorm.annotations.Id;
import com.aiivar.sjorm.exceptions.OrmException;
import com.aiivar.sjorm.query.builder.AbstractQueryBuilder;
import com.aiivar.sjorm.query.createtable.CreateTableQuery;
import com.aiivar.sjorm.query.createtable.CreateTableQueryImpl;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

public class SimpleCreateTableQueryBuilder<T> extends AbstractQueryBuilder implements CreateTableQueryBuilder<T> {

    @Override
    public CreateTableQuery buildQuery(Class<T> entityClass) {
        if (!entityClass.isAnnotationPresent(Entity.class)) {
            throw new OrmException("The class is not annotated with @Entity");
        }

        String tableName = getTableName(entityClass);
        List<String> columnDefinitions = new ArrayList<>();

        for (Field field : entityClass.getDeclaredFields()) {
            if (field.isAnnotationPresent(Column.class)) {
                String columnName = "\"" + field.getAnnotation(Column.class).name() + "\"";
                String columnType = getColumnType(field.getType());

                if (field.isAnnotationPresent(Id.class)) {
                    columnDefinitions.add(columnName + " " + columnType + " GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY");
                } else {
                    columnDefinitions.add(columnName + " " + columnType);
                }
            }
        }

        String columnDefinitionsString = String.join(", ", columnDefinitions);

        String sql = "CREATE TABLE " + tableName + " (" + columnDefinitionsString + ")";
        return new CreateTableQueryImpl(sql);
    }
}
